#!/bin/sh

readlink_f() { file="$1";while true; do 
local link="$( readlink $file )"; [ "${link}" = "" ] && break
file="${link}"; done; echo "${file}"; }

me="$(basename $(readlink_f $0))"

HOSTNAME="$(hostname -s)"
comp_cmd="pxz"
comp_args="-z9"
comp_ext="xz"
comp_args_opt="no"
dir="/tmp/backup"
mysql_user="root"

set_opts() {
  while [ "$#" != "0" ]; do
    case $1 in
      "-mu" | "--mysql-user")
          shift
          mysql_user="${1}"
      ;;
      "-mp" | "--mysql-password")
          shift
          mysql_password="${1}"
      ;;
      "-c" | "--compressor")
          shift
          comp_cmd="${1}"
          [ "${comp_args_opt}" == "no" ] && comp_args=""
      ;;
      "-ca" | "--compressor-args")
        shift
          comp_args="${1}"
          comp_args_opt="yes"
      ;;
      "-ce" | "--compressor-ext")
          shift
          comp_ext="${1}"
      ;;
      "-d")
          shift
          dir="${1}"
      ;;
      *)
          backup="${backup} ${1}"
      ;;
    esac
    [ "$#" != "0" ] && shift
  done
}

usage() {
   cat <<EOF
usage: ${me} [options] [db]...

Database backup tool supporting different types of databases with 
compression.

Databases:
    mongodb                    MongoDB (tarballed mongodump)
    mysql                      MySQL (mysqldump)
    postgres                   PostgreSQL (pg_dumpall)

Options:
   -c cmd, --comp-cmd cmd      Use cmd as compressor command
                               (default: ${comp_cmd})
   -ca args, --comp-cmd-args   Arguments for compressor
                               (default: ${comp_args})
   -ce ext, --comp-ext         Compressor extension
                               (default: ${comp_ext}
   -d dir, --directory dir      Directory to save the backup
                               (default: ${dir})
   
   MySQL specific

   -mu user    , --mysql-user user   
                               MySQL username
                               (default: $mysql_user)
   -mp password, --mysql-password password
                               MySQL password, if you don't specify this
                               argument, you will be prompted for the
                               password

EOF
    exit 130
}

enforce_opts() {
   if [ ! -d "${dir}" ]; then
      mkdir -pv "${dir}"; 
      [ "$?" -ne "0" ] && exit 1
   fi
}

date="$(date +"%Y-%m-%d_%H:%M")"
user_compress() {
   "$comp_cmd" $comp_args > "${dir}/${HOSTNAME}-${backup_name}-${date}.${comp_ext}"
}

verbose_header() {
   echo "${me} - Database Backup utility - Felipe A Buccioni <falcacibar@gmail.com>"
}

verbose_compress() {
   cat <<EOF
Compressor command    : ${comp_cmd}
Compressor arguments  : ${comp_args}
Compressor extension  : .${comp_ext}

EOF
}

verbose_exec() {
   echo "Executing Command     : $cmd | \"$comp_cmd\" $comp_args > \"${dir}/${HOSTNAME}-${backup_name}-${date}.${comp_ext}\""
}

verbose_header
set_opts "$@"
enforce_opts

if [ "" != "$(echo "${backup}" | sed -e 's/^[ \t]*//g' -e 's/[ \t]*$//g')" ]; then 
    verbose_compress
    cd "${dir}"

    for type in $backup; do
        success="no"
        case "$type" in
            "postgres")
                db_type="PostgreSQL"
                backup_name="postgres"
                cmd="sudo -u postgres pg_dumpall"
                
                chmod -v 777 "${dir}"
                verbose_exec
                sudo -u postgres pg_dumpall | user_compress
                
                [ "$?" = "0" ] \
                    && success="yes" \
                    || sucess="no"

                chmod -v 755 "${dir}"
            ;;
            "mysql")
                db_type="MySQL"
                backup_name="mysql"

                version="$(mysql --version | sed -re 's/^.*Distrib //g' -e 's/([0-9]+)\.([0-9]).*$/\1.\2/g')"
                if [ -z "$version" ]; then
                   echo "Cannot get the current version of mysql"
                   exit 1
                fi

                verma="$(echo $version | cut -d. -f1)"
                vermi="$(echo $version | cut -d. -f2)"

                if [ "$verma" -gt "5" ] || ( [ "$verma" -eq "5" ] && [ "$vermi" -gt "0" ] ); then
                   mysql_vars_opt="-E"
                fi

                if [ "$verma" -gt "4" ]; then
                  mysql_vars_opt="${mysql_vars_opt} -R --triggers"
                fi

                cmd="mysqldump --opt  --add-drop-table -A ${mysql_vars_opt} --skip-lock-tables -u$mysql_user -p$mysql_password"
                verbose_exec
                mysqldump --opt  --add-drop-table -A ${mysql_vars_opt} --skip-lock-tables -u$mysql_user -p$mysql_password | user_compress

                [ "$?" = "0" ] \
                    && success="yes" \
                    || sucess="no"
            ;; 
            "mongodb")
                db_type="MongoDB"
                backup_name="mongo"
                cmd="mongodump && ( tar -cvf - dump )"
                verbose_exec
                mongodump && ( tar -cvf - dump | user_compress )
                success="$?"
                echo -n "Cleaning mongodb dump"
                rm -rf dump
                echo "done"

                [ "$success" = "0" ] \
                    && success="yes" \
                    || sucess="no"
            ;;
            *)
                 echo "Unknown backup type '$type', skipping"
        esac
        
        if [ "${success}" = "yes" ]; then
            echo "Backup of $db_type database completed!\n"
        else
            echo "Backup for $db_type failed"
            exit 1
        fi
    done
else
    usage
fi
